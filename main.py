import os
import asyncio
from typing import Any, Dict, Union
from aiogram import Bot, Dispatcher, types, F, BaseMiddleware
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import FSInputFile, InputMediaPhoto, Message
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.methods.get_file import GetFile
from PIL import Image
from dotenv import load_dotenv


# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
dotent_path = os.path.join(os.path.dirname(__file__), '.env')
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")
WATERMARK_PATH = "watermark.png"
AUTH_KEY = os.getenv("SECRET_KEY")  # –°—Ç–∞—Ç–∏—á–Ω—ã–π –∫—é—á –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ª—å–±–æ–º–æ–≤
class AlbumMiddleware(BaseMiddleware):
    def __init__(self, latency: Union[int, float] = 0.1):
        self.latency = latency
        self.album_data = {}

    def collect_album_messages(self, event: Message):
        if event.media_group_id not in self.album_data:
            self.album_data[event.media_group_id] = {"messages": []}
        self.album_data[event.media_group_id]["messages"].append(event)
        return len(self.album_data[event.media_group_id]["messages"])

    async def __call__(self, handler, event: Message, data: Dict[str, Any]) -> Any:
        if not event.media_group_id:
            return await handler(event, data)

        total_before = self.collect_album_messages(event)
        await asyncio.sleep(self.latency)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –µ—â–µ media_group_id –≤ album_data
        if event.media_group_id not in self.album_data:
            return

        total_after = len(self.album_data[event.media_group_id]["messages"])

        if total_before != total_after:
            return

        album_messages = self.album_data[event.media_group_id]["messages"]
        album_messages.sort(key=lambda x: x.message_id)
        data["album"] = album_messages
        del self.album_data[event.media_group_id]
        return await handler(event, data)

dp.message.middleware(AlbumMiddleware())

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class PostStates(StatesGroup):
    waiting_for_auth = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –∫–ª—é—á–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    waiting_for_content = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –ø–æ—Å—Ç–∞

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
os.makedirs("temp", exist_ok=True)

def main_menu():
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç"))
    return builder.as_markup(resize_keyboard=True)

def cancel_menu():
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="–û—Ç–º–µ–Ω–∞"))
    return builder.as_markup(resize_keyboard=True)

def add_watermark(image_path, output_path):
    try:
        base_image = Image.open(image_path).convert("RGBA")
        watermark = Image.open(WATERMARK_PATH).convert("RGBA")

        wm_width = int(base_image.width * 0.20)
        aspect_ratio = watermark.height / watermark.width
        wm_height = int(wm_width * aspect_ratio)
        watermark = watermark.resize((wm_width, wm_height))

        position = (base_image.width - watermark.width - 30, 30)
        transparent = Image.new('RGBA', base_image.size, (0, 0, 0, 0))
        transparent.paste(watermark, position, mask=watermark)

        watermarked = Image.alpha_composite(base_image, transparent)
        watermarked.convert("RGB").save(output_path)
        return True
    except Exception as e:
        print(f"Watermark error: {e}")
        return False

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    await state.set_state(PostStates.waiting_for_auth)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:",
        reply_markup=cancel_menu()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª—é—á–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
@dp.message(PostStates.waiting_for_auth)
async def process_auth(message: types.Message, state: FSMContext):
    if message.text == AUTH_KEY:
        await state.set_state(PostStates.waiting_for_content)
        await message.answer(
            "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–æ—Å—Ç—ã.",
            reply_markup=main_menu()
        )
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
@dp.message(F.text == "–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç", PostStates.waiting_for_content)
async def create_post(message: types.Message, state: FSMContext):
    await state.set_state(PostStates.waiting_for_content)
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ—Å—Ç (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –∞–ª—å–±–æ–º):",
        reply_markup=cancel_menu()
    )

# –û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞
@dp.message(F.text == "–û—Ç–º–µ–Ω–∞", PostStates.waiting_for_content)
async def cancel_post(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=main_menu())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
@dp.message(PostStates.waiting_for_content)
async def process_content(message: types.Message, state: FSMContext, album: list[Message] = None):
    processed_files = []
    media_group = []
    caption = None

    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ª—å–±–æ–º–∞
        if album:
            caption = album[0].caption or None
            for msg in album:
                if msg.photo:
                    file_id = msg.photo[-1].file_id
                    file = await bot(GetFile(file_id=file_id))
                    original_path = f"temp/orig_{file_id}.jpg"
                    await bot.download_file(file.file_path, original_path)

                    output_path = f"temp/wm_{file_id}.jpg"
                    if add_watermark(original_path, output_path):
                        processed_files.append((original_path, output_path))
                        media_group.append(InputMediaPhoto(
                            media=FSInputFile(output_path),
                            caption=caption if len(media_group) == 0 else None
                        ))

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        else:
            if message.photo:
                file_id = message.photo[-1].file_id
                file = await bot(GetFile(file_id=file_id))
                original_path = f"temp/orig_{file_id}.jpg"
                await bot.download_file(file.file_path, original_path)

                output_path = f"temp/wm_{file_id}.jpg"
                if add_watermark(original_path, output_path):
                    processed_files.append((original_path, output_path))
                    media_group.append(InputMediaPhoto(
                        media=FSInputFile(output_path),
                        caption=message.caption or message.text
                    ))
            elif message.text:
                caption = message.text

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        if media_group:
            await bot.send_media_group(CHANNEL_ID, media=media_group)
        elif caption:
            await bot.send_message(CHANNEL_ID, caption)

        await message.answer("‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!", reply_markup=main_menu())

    except Exception as e:
        await message.answer(f"üö® –û—à–∏–±–∫–∞: {str(e)}")

    finally:
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        for original, output in processed_files:
            try:
                os.remove(original)
                os.remove(output)
            except:
                pass
        await state.set_state(PostStates.waiting_for_content)

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    dp.run_polling(bot)